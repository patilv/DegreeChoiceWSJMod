{
    "contents" : "library(reshape2)\nlibrary(rCharts)\nlibrary(maps)\nlibrary(geosphere)\nlibrary(plyr) \nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sp)\nlibrary(ggmap)\nlibrary(rCharts)\nmensbracket=read.csv(\"mensbracket.csv\")\nladiesbracket=read.csv(\"ladiesbracket.csv\")\nmensbracket$gender=\"Male\"\nladiesbracket$gender=\"Female\"\n\nusopenbracket=rbind(mensbracket,ladiesbracket)\n\n########### Great Circles of Countries #########\nusopencountry=as.data.frame(table(usopenbracket$country))\n\ncolnames(usopencountry)=c(\"Country\",\"Players\")\nusopencountry=cbind(usopencountry,geocode(as.character(usopencountry$Country)))\n# \n# # a check on the geocodes was done for usopen (lon,lat)\n# 5. Bosnia should correctly be: \"18.383925\",\"43.851882\"\n# 11. cyprus, \"33.3974183\",\"35.1919937\"\n# 45. New Zealand,   \"174.885971\",\"-40.900557\"\nusopencountry[5,]$lon=18.383925\nusopencountry[5,]$lat=43.851882\nusopencountry[11,]$lon=33.3974183\nusopencountry[11,]$lat=35.1919937\nusopencountry[45,]$lon=174.885971\nusopencountry[45,]$lat=-40.900557\n\n\nsave(usopencountry,file=\"usopencountry.Rda\")\n########################################## REST DONE FOR US OPEN ONLY... MENS AND WOMENS CAN BE DONE AS WELL ....\n\nload(\"usopencountry.Rda\")\n\nnygeocode=geocode(as.character(\"New York City\"))\n\n# Code borrowed from : http://web.stanford.edu/~cengel/cgi-bin/anthrospace/great-circles-on-a-recentered-worldmap-in-ggplot\n\n# calculate routes -- Dateline Break FALSE, otherwise we get a bump in the shifted ggplots\nrts <- gcIntermediate(nygeocode, usopencountry[,c('lon', 'lat')], 200, breakAtDateLine=FALSE, addStartEnd=TRUE, sp=TRUE)\n\n# function from ggplot's github site\nfortify.SpatialLinesDataFrame <- function(model, data, ...) {\n  ldply(model@lines, fortify)\n}\n\nrts.ff <- fortify.SpatialLinesDataFrame(rts) # convert into something ggplot can plot\n\nusopencountry$id <-as.character(c(1:nrow(usopencountry))) \n\ngcircles <- merge(rts.ff, usopencountry, all.x=T, by=\"id\") # join attributes, we keep them all, just in case\n\n\n### Recenter ####\n\ncenter <- 290 # positive values only - US centered view is 260. This took a bit to figure out.\n\n# shift coordinates to recenter great circles\ngcircles$long.recenter <-  ifelse(gcircles$long  < center - 180 , gcircles$long + 360, gcircles$long) \n\n# shift coordinates to recenter worldmap\nworldmap <- map_data (\"world\")\nworldmap$long.recenter <-  ifelse(worldmap$long  < center - 180 , worldmap$long + 360, worldmap$long)\n\n### Function to regroup split lines and polygons\n# takes dataframe, column with long and unique group variable, returns df with added column named group.regroup\nRegroupElements <- function(df, longcol, idcol){  \n  g <- rep(1, length(df[,longcol]))\n  if (diff(range(df[,longcol])) > 300) {          # check if longitude within group differs more than 300 deg, ie if element was split\n    d <- df[,longcol] > mean(range(df[,longcol])) # we use the mean to help us separate the extreme values\n    g[!d] <- 1     # some marker for parts that stay in place (we cheat here a little, as we do not take into account concave polygons)\n    g[d] <- 2      # parts that are moved\n  }\n  g <-  paste(df[, idcol], g, sep=\".\") # attach to id to create unique group variable for the dataset\n  df$group.regroup <- g\n  df\n}\n\n### Function to close regrouped polygons\n# takes dataframe, checks if 1st and last longitude value are the same, if not, inserts first as last and reassigns order variable\nClosePolygons <- function(df, longcol, ordercol){\n  if (df[1,longcol] != df[nrow(df),longcol]) {\n    tmp <- df[1,]\n    df <- rbind(df,tmp)\n  }\n  o <- c(1: nrow(df))  # rassign the order variable\n  df[,ordercol] <- o\n  df\n}\n\n# now regroup\ngcircles.rg <- ddply(gcircles, .(id), RegroupElements, \"long.recenter\", \"id\")\nworldmap.rg <- ddply(worldmap, .(group), RegroupElements, \"long.recenter\", \"group\")\n\n# close polys\nworldmap.cp <- ddply(worldmap.rg, .(group.regroup), ClosePolygons, \"long.recenter\", \"order\")  # use the new grouping var\n\n# plot\n\nggplot() +\n  geom_polygon(aes(long.recenter,lat,group=group.regroup), size = 0.1, fill=\"black\", colour = \"#4D4D4D\", data=worldmap.cp) +\n  geom_line(aes(long.recenter,lat.x,group=group.regroup, color=Country, alpha=Players), size=1,data= gcircles.rg)+ # +        # set transparency here\n  theme(panel.background = element_blank(), panel.grid.minor = element_blank(), panel.grid.major = element_blank(),  \n         axis.ticks = element_blank(), axis.title.x = element_blank(), \n         axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), legend.position = \"none\")+\n  ylim(-60, 90) +theme(panel.background = element_rect(fill = 'black'))+\n  coord_equal()+annotate(\"text\",x=max(worldmap.cp$long.recenter),y=-60,hjust=.9,size=3,label=paste(\"Nationalities of Players of 2014 US Open (Men and Women)\",\"by Vivek Patil\",sep=\"\\n\"),color=\"white\") \n######\n\ncountrygendercount=table(usopenbracket$country,usopenbracket$gender)\ncountrygendercount=melt(countrygendercount,id=\"country\")\ncolnames(countrygendercount)=c(\"country\",\"gender\",\"count\")\ncountrygendercount$country=as.character(countrygendercount$country)\ncountrygendercount=countrygendercount[order(countrygendercount$country),]\nnp1=nPlot(count~country,data=countrygendercount,group=\"gender\",type =\"multiBarHorizontalChart\",stacked=FALSE,height=800)\nnp1$chart(margin=list(top= 30, right= 20, bottom= 20, left= 150))\nnp1$chart(color=c(\"#FF4444\",\"#002865\"))\nnp1\nnp1$publish(\"np1nationality\",host=\"gist\")\n\n# http://bl.ocks.org/patilv/raw/07acfa7c0f1d8840963d/\n\n",
    "created" : 1413839990470.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1726131038",
    "id" : "7C71AD68",
    "lastKnownWriteTime" : 1410891413,
    "path" : "C:/Users/patil.GONZAGA/Dropbox/Reverything/TENNIS/playernationality.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}